#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'sinatra'
require 'dm-core'
require 'dm-timestamps'
require 'dm-validations'
require 'dm-aggregates'
require 'haml'
require 'sass'
require 'base64'

set :run, true

# Read working dir. {{{1
idx = ARGV.index('--')
DIR = File.expand_path(
    if idx.nil? or ARGV[idx+1].nil?
        Dir.pwd
    else
        ARGV[idx+1]
    end
)

unless File.exist?(DIR) and File.directory?(DIR)
    puts "No such directory: #{DIR}"
    exit -1
end

CONF_FILE = "#{DIR}/qwicky.yml"
DB_URL = ENV['DATABASE_URL'] || "sqlite3://#{DIR}/qwicky.db"
STYLES_FILE = "#{DIR}/qwicky.sass"

# Database stuff. {{{1
class Page
    include DataMapper::Resource

    property :id, Serial
    property :name, Text, :nullable => false
    property :content, Text, :nullable => false
end

DataMapper::setup(:default, DB_URL)

begin
    DataMapper::auto_upgrade!
rescue Sqlite3Error => e
    if e.message =~ %r{unable to open database file}
        $stderr.puts "Unable to create/open `#{DB_URL}'"
        $stderr.puts "Please make database file readable and writable."
        exit -1
    else
        raise
    end
end

# Markup stuff. {{{1
module Markup
    # Base class. {{{2
    class Markup
        class << self
            attr_reader :description, :link

            def markups
                @@markups
            end

            def [] type
                @@markups ||= Hash.new
                @@markups[type]
            end

            def type id, description, link = nil
                @@markups ||= Hash.new
                @@markups[id] = self
                @description = description
                @link = link
            end
        end

        def description
            self.class.description
        end

        def link
            self.class.link
        end

        def format text
            text
        end

        def linkify link, title, klass, text
            "<a href=#{link.inspect} title=#{title.inspect} class=#{klass.inspect}>#{text}</a>"
        end
    end

    # Text. {{{2
    class MText < Markup
        type 'text', 'Simple text'

        def format text
            "<span style='white-space:pre'>#{text}</span>"
        end
    end

    # Markdown. {{{2
    class MMarkdown < Markup
        type 'markdown', 'Markdown', 'http://daringfireball.net/projects/markdown/'

        def initialize
            unless Object.const_defined?(:Markdown)
                begin
                    require 'rdiscount'
                    return
                rescue LoadError => boom
                end

                begin
                    require 'peg_markdown'
                    return
                rescue LoadError => boom
                end

                begin
                    require 'maruku'
                    Object.const_set(:Markdown, Maruku)
                    return
                rescue LoadError => boom
                end

                begin
                    require 'bluecloth'
                    return
                rescue LoadError => boom
                    puts "Looks like you don't have a Markdown interpreter installed!"
                    puts "Please get one, like"
                    puts "* RDiscount"
                    puts "* peg-markdown"
                    puts "* Maruku"
                    puts "* BlueCloth"
                    puts "Reverting to simple text markup"
                    throw :revert
                end
            end
        end

        def format text
            Markdown.new(text).to_html
        end
    end

    # Textile. {{{2
    class MTextile < Markup
        type 'textile', 'Textile', 'http://textism.com/tools/textile/'

        def initialize
            unless Object.const_defined?(:RedCloth)
                begin
                    require 'redcloth'
                rescue LoadError => boom
                    puts "Looks like you don't have RedCloth installed!"
                    puts "This is the gem needed to render Textile syntax"
                    puts "Reverting to simple text markup"
                    throw :revert
                end
            end
        end

        def format text
            RedCloth.new(text).to_html
        end
    end

    # RDoc. {{{2
    class MRDoc < Markup
        type 'rdoc', 'RDoc', 'http://rdoc.sourceforge.net/doc/index.html'
        
        def initialize
            unless Object.const_defined?(:SM)
                begin
                    require 'rdoc/markup/simple_markup'
                    require 'rdoc/markup/simple_markup/to_html'
                rescue LoadError => boom
                    puts "Looks like you don't have rdoc installed!"
                    puts "This is the gem needed to render RDoc syntax"
                    puts "Reverting to simple text markup"
                    throw :revert
                end
            end
        end

        def format text
            ret = SM::SimpleMarkup.new.convert(text, SM::ToHtml.new)
            ret.gsub %r{\[\[([^|]+)\|([^|]+)\|([^|]+)\|([^|]+)\]\]} do
                "<a href=#{$1.inspect} title=#{$2.inspect} class=#{$3.inspect}>#{$4}</a>"
            end
        end

        def linkify link, title, klass, text
            "[[#{link}|#{title}|#{klass}|#{text}]]"
        end
    end
end

# App class. {{{1
class Qwicky
    attr_accessor :conf, :markup

    def initialize
        begin
            FileUtils.touch(CONF_FILE) unless File.exist?(CONF_FILE)
        rescue Errno::EACCES
            $stderr.puts "Unable to create `#{CONF_FILE}'"
            $stderr.puts "Please make directory writable or manually create a readable config file."
            exit -1
        end

        @conf = {
            'homepage' => '',
            'markup' => 'text',
        }.merge(
            open(CONF_FILE) { |f|
                YAML::load(f) || Hash.new
            }
        )

        set_markup
    end

    def set_markup
        catch :revert do
            @markup = Markup::Markup[@conf['markup']].new
            return
        end

        @markup = Markup::Markup['text'].new
    end

    def format text
        markup.format(
            text.gsub %r{\[\[([^|\]]+)(\|([^\]]+))?\]\]} do |match|
                page = $1
                nexist = Page.first(:name => page).nil?
                klass = nexist ? 'bad' : 'good'
                title = nexist ? "Create page `#{page}'" : "Page `#{page}'"
                link = '/' + page
                markup.linkify(link, title, klass, ($3 || $1))
            end
        )
    end
end

APP = Qwicky.new

# Routes. {{{1
helpers do
    def redirect_home
        if APP.conf['homepage'].empty?
            redirect "/..settings"
        else
            redirect "/#{APP.conf['homepage']}"
        end
    end

    def markup text
        APP.format(text)
    end
end

before do
    @configurable = File.writable?(CONF_FILE)
end

get '/' do
    redirect_home
end

get '/..settings/?' do
    if File.writable?(CONF_FILE)
        @settings = APP.conf
        @title = 'Settings'
        @markups = Markup::Markup.markups
        haml :settings
    else
        haml "%h1 Unfortunately, the config file for this Qwicky instance is not writable!"
    end
end

post '/..settings/?' do
    APP.conf.merge!(params[:settings])
    APP.set_markup

    if File.writable?(CONF_FILE)
        open(CONF_FILE, 'w') { |f|
            f.write(YAML::dump(APP.conf))
        }
    end
    
    redirect_home
end

get '/..license/?' do
    content_type 'text'
    open('LICENSE').read
end

get '/..stylesheet.css' do
    content_type 'text/css'
    sass :stylesheet
end

get '/..user.stylesheet.css' do
    content_type 'text/css'

    if File.exist?(STYLES_FILE)
        sass open(STYLES_FILE).read()
    else
        ''
    end
end

get '/..favicon' do
    content_type 'image/png'
    Base64::decode64(haml(:favicon, :layout => false))
end

get '/..sitemap' do
    @title = 'Sitemap'
    @pages = Page.all.sort_by { |page| page.name }
    haml :sitemap
end

get '/:page/?' do |page|
    @page = Page.first(:name => page)
    redirect "/#{page}/edit" if @page.nil?
    @title = page
    haml :page
end

get '/:page/edit/?' do |page|
    @markup = APP.markup
    @page = Page.first(:name => page) || Page.new(:name => page)
    @title = "Editing #{page}"
    haml :edit
end

post '/:page/?' do |page|
    @page = Page.first(:name => page) || Page.new
    @page.name = params[:name]
    @page.content = params[:content]
    @page.save

    redirect "/#{page}"
end

delete '/:page/?' do |page|
    page = Page.first(:name => page)
    page.destroy unless page.nil?

    redirect_home
end


# Templates. {{{1
__END__

@@edit
%form{ :action => "/#{@page.name}", :method => 'post', :id => 'edit-page' }
  %label{ :for => 'name' } Name
  %input{ :type => 'text', :name => 'name', :value => @page.name }
  %br/
  .markup
    Markup:
    - if @markup.link.nil?
      = @markup.description
    - else
      %a{ :title => "#{@markup.description} homepage", :href => @markup.link, :onclick => 'return external(this)' }= @markup.description
  %label{ :for => 'content' } Content
  %br/
  %textarea{ :name => 'content' }= @page.content
  %br/
  %input{ :type => 'submit', :value => 'Save!' }

%form{ :action => "/#{@page.name}", :method => 'post', :onsubmit => 'return confirm("Are you sure you want to delete this page?")' }
  %input{ :type => 'hidden', :name => '_method', :value => 'delete' }
  %input{ :type => 'submit', :value => 'Delete this page!' }


@@layout
!!!XML
!!! Strict
%html{html_attrs}

  %head
    %title 
      Qwicky! --
      - unless @title.nil?
        = @title
    %link{ :rel => 'shortcut icon', :href => '/..favicon' , :type => 'image/png' }
    %link{ :rel => 'stylesheet', :type => 'text/css', :href => "/..stylesheet.css" }
    %link{ :rel => 'stylesheet', :type => 'text/css', :href => "/..user.stylesheet.css" }
    :javascript
      /*global window*/

      function changePage() {
          window.location.href = '/' + document.getElementById('location').value;
          return false;
      }

      function external(link) {
          window.open(link.href);
          return false;
      }

  %body

    #header
      .right
        %a{ :title => 'Go the the main page of this wiki', :href => '/' } Home
        &#8226;
        %a{ :title => 'View what pages this wiki has', :href => '/..sitemap' } Sitemap
        - if @configurable
          &#8226;
          %a{ :title => 'Adjust settings', :href => '/..settings' } Settings
      - if @page
        %a.edit{ :title => 'Edit this wiki page', :href => "/#{@page.name}/edit" } Edit
      %form{ :action => '/', :method => 'get', :onsubmit => 'return changePage()' }
        %input#location{ :type => 'text', :name => 'location' }
        %input{ :type => 'submit', :value => 'Go!' }

    #main
      = yield

    #footer
      .copyleft
        (c) 2009 by
        %a{ :title => "Visit karottenreibe's glorious homepage", :href => 'http://karottenreibe.heroku.com'} karottenreibe
        (karottenreibe _at_ gmail _dot_ com)
        %br/
        Licensed under the
        %a{ :title => 'The License of Qwicky', :href => '/..license' } DONT'T PANIC License 1.1
        %br/
        If you want to contribute, visit
        %a{ :title => 'Here you can contribute to the project', :href => 'http://wiki.github.com/karottenreibe/qwicky/' } Qwicky's GitHub page
      - if @page
        %a.edit{ :title => 'Edit this wiki page', :href => "/#{@page.name}/edit" } Edit


@@page
#page
  %h1= @page.name
  .content
    = find_and_preserve markup(@page.content), %w{pre blockquote}

@@settings
%form{ :action => "/..settings", :method => 'post', :id => 'settings' }
  %label{ :for => 'settings[homepage]' } Homepage
  %input{ :type => 'text', :name => 'settings[homepage]', :value => @settings['homepage'] }
  %br/
  %label{ :for => 'settings[markup]' } Markup engine
  - @markups.each do |name,markup|
    - if markup.link.nil?
      %input{ :type => 'radio', :name => 'settings[markup]', :checked => (@settings['markup'] == name), :value => name }= markup.description
    - else
      %input{ :type => 'radio', :name => 'settings[markup]', :checked => (@settings['markup'] == name), :value => name }
        %a{ :title => "#{markup.description} homepage", :href => markup.link, :onclick => 'return external(this)' }= markup.description
  %br/
  %input{ :type => 'submit', :value => 'Save!' }


@@sitemap
%ul#sitemap
  - @pages.each do |page|
    %li
      %a{ :title => page.name, :href => "/#{page.name}" }= page.name
      %a.edit{ :title => page.name, :href => "/#{page.name}/edit" } (edit)

@@stylesheet
!border = #eee
!emphasis = #f40
!background = #fff
!foreground = #000

body
  :color= !foreground
  :background-color= !background

a
  :text-decoration none
  :color= !emphasis
  :border-bottom= 1px dotted !background

  &:hover
    :border-bottom= 1px dotted !emphasis

  &.bad
    :text-decoration line-through

form

  input, textarea
    :border= 1px solid !foreground
    :background-color= !border

  textarea
    :width 400px
    :height 400px

  input[type=text]
    :width 250px

  label
    :display inline-block
    :width 145px
    :font-family monospace
    :padding-bottom 10px

#header
  :text-align center
  :border-bottom= 2px solid !border
  :padding 5px

  .right
    :float right
  a.edit
    :float left

#main
  :padding 20px

  ul#sitemap
    li
      :display inline-block
      :width 32%
      :margin-bottom 10px

      a.edit
        :font-family monospace
        :font-size 0.8em

  form#edit-page
    :padding-bottom 20px
    :border-bottom= 2px solid !border
    :margin-bottom 20px
    :width 410px

    .markup
      :float right
      :font-family monospace
      :padding-right 10px

  pre
    :border-left= 3px solid !border
    :padding 10px


  blockquote
    :margin 0px
    :padding 10px
    :font-style italic
    :border-left= 3px solid !border

    p
      :display inline
      :white-space pre

#footer
  :border-top= 2px solid !border
  :padding 5px

  .copyleft
    :font-family monospace
    :float right


@@favicon
:plain
  iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
  /wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9kGDxMdDihyXoMAAAAZdEVYdENv
  bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAADTUlEQVRYw+2XbWjNcRTHP+de7h7YxTSmPSgb
  XkysDXmMJKwQIXtBeUySosneeUdJeSVKFKVkyJrkMXnh4YVlQ1oz8zRyryvTbMMe7vHi/3fv/vd/
  7/9/Z0XJefX//x7O73u+55zfOT9RVeUvioe/LP8B/AcwyHH283O0qQZpPA/BOgh3owoydAyMXYAW
  rUPGLgCvL7GOL6/Q1iYE0HAvUlBmmZa4adgZgnOL0GA9GFuRkRNhSDb0fEdDz6C7HRFQBcpOIlM2
  xT1f648j17cZ3950ZE+HMwMaqENOl6AqxuGeQbChFkZNjqIG9OJKtKkaEeDaZrThLFJ+044gI89g
  TUCG5TnHgLYH4FQJIIioYXn5DaTP4REQqy7BqGITDvD6Flq91r7On2uABMjIdQYgVYsilINAdink
  z0/oXll8zFxrWthYBW9u2xiIGJjhxMC7exB6alqOobhovXMI58yIhQR3Kq1DqcOjs04M6NPTpt/N
  fwVyZ7umkebM6fsHgVq0u9O6xpNqMuDkgrd3+lhvUpo5wRWAZI63HqaGLqsbco1A9DsAkC9NdkUp
  fvebJD3LCkhAWq268Oe5x0DsbSCS3E2m3lT74I82GwNJZYGNgSREtNe+z5cRk4qG5ZKW6QAgNTMO
  irA7ghhrRYC0kTEs+dyLkWSX2BRpW4s7gK9x1uTMjE3OhC6NxkDhcgvtqkDgkTuAYJ3VWvHBiELr
  WG9XEgxM3WlBKQI0X3EOwK4OaHtjHZxeYY+TefuhUpPoB+YdtM4+OekcgA8PW4hWTwoy/8AAGpIZ
  e9FxSyOuEAGqyuLvbG2Gu/uiVROFLc/s6zqCcMgHBwW9sdM9DWXNZWR6hQlC4NU1OJoPL69He4Wr
  W9HjE1E1q6bXB9tbkBEFdjc9PgHhbuPn0ZE4aZzoXdAeQG/tQhrPReq5hRkAbwq64gKMW4J44jdX
  +v4BcmaW8T16KrLhYZIAfkm4x+gTutrgUwNUrzbALDyClO5IztGfGtD2D5A3F/EO7ieAWLmwDH1x
  xWhW0rPQoTmILx2dtBEp3vIHuuJVNeDPN+LjWwgJ1cP7+8jXFn5H+g9ABNn+Eqbt7lfNSFxLBvI4
  7fmBBuug8yMML0Cyiv4wgH/hZfQTiUAxe3ePrOMAAAAASUVORK5CYII=
